package com.mongodb.reactor.client.tracing

import brave.Tracing
import com.mongodb.MongoNamespace
import com.mongodb.MongoWriteException
import com.mongodb.ReadConcern
import com.mongodb.ReadPreference
import com.mongodb.WriteConcern
import com.mongodb.client.model.BulkWriteOptions
import com.mongodb.client.model.CountOptions
import com.mongodb.client.model.CreateIndexOptions
import com.mongodb.client.model.DeleteOptions
import com.mongodb.client.model.DropIndexOptions
import com.mongodb.client.model.EstimatedDocumentCountOptions
import com.mongodb.client.model.FindOneAndDeleteOptions
import com.mongodb.client.model.FindOneAndReplaceOptions
import com.mongodb.client.model.FindOneAndUpdateOptions
import com.mongodb.client.model.IndexModel
import com.mongodb.client.model.IndexOptions
import com.mongodb.client.model.InsertManyOptions
import com.mongodb.client.model.InsertOneModel
import com.mongodb.client.model.InsertOneOptions
import com.mongodb.client.model.RenameCollectionOptions
import com.mongodb.client.model.ReplaceOptions
import com.mongodb.client.model.UpdateOptions
import com.mongodb.reactivestreams.client.ClientSession
import com.mongodb.reactivestreams.client.MongoCollection
import io.mockk.confirmVerified
import io.mockk.mockk
import io.mockk.spyk
import io.mockk.verifyAll
import org.bson.BsonDocument
import org.bson.Document
import org.bson.codecs.configuration.CodecRegistry
import org.junit.jupiter.api.AfterEach
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import reactor.kotlin.test.test

internal class TracingReactorMongoCollectionTest {

    private val tracing = mockk<Tracing>(relaxed = true)
    private val original = mockk<MongoCollection<Document>>(relaxed = true)
    private val tracingReactor = spyk(TracingReactorMongoCollection(original, tracing))
    private val collection = MongoContainer.database.getCollection(MongoContainer.COLLECTION_NAME)

    @BeforeEach
    fun init() {
        MongoContainer.initData()
    }

    @AfterEach
    fun clean() {
        MongoContainer.clearData()
    }

    @Test
    fun `tracing reactor collection should always delegate method calls to the underlying collection`() {
        tracingReactor.withDocumentClass(Document::class.java)
        val registry = mockk<CodecRegistry>(relaxed = true)
        tracingReactor.withCodecRegistry(registry)
        tracingReactor.withReadPreference(ReadPreference.nearest())
        tracingReactor.withWriteConcern(WriteConcern.W1)
        tracingReactor.withReadConcern(ReadConcern.LOCAL)
        tracingReactor.estimatedDocumentCount()
        val estimatedDocumentCountOptions = EstimatedDocumentCountOptions()
        tracingReactor.estimatedDocumentCount(estimatedDocumentCountOptions)
        tracingReactor.countDocuments()
        val countOptions = CountOptions()
        val bsonDocument = BsonDocument()
        tracingReactor.countDocuments(bsonDocument)
        tracingReactor.countDocuments(bsonDocument, countOptions)
        val session = mockk<ClientSession>()
        tracingReactor.countDocuments(session)
        tracingReactor.countDocuments(session, bsonDocument)
        tracingReactor.countDocuments(session, bsonDocument, countOptions)
        val usernameAttribute = "username"
        tracingReactor.distinct(usernameAttribute, Document::class.java)
        tracingReactor.distinct(usernameAttribute, bsonDocument, Document::class.java)
        tracingReactor.distinct(session, usernameAttribute, Document::class.java)
        tracingReactor.distinct(session, usernameAttribute, bsonDocument, Document::class.java)
        tracingReactor.find()
        tracingReactor.find(Document::class.java)
        tracingReactor.find(bsonDocument)
        tracingReactor.find(bsonDocument, Document::class.java)
        tracingReactor.find(session)
        tracingReactor.find(session, Document::class.java)
        tracingReactor.find(session, bsonDocument)
        tracingReactor.find(session, bsonDocument, Document::class.java)
        val pipeline = listOf(bsonDocument)
        tracingReactor.aggregate(pipeline)
        tracingReactor.aggregate(pipeline, Document::class.java)
        tracingReactor.aggregate(session, pipeline)
        tracingReactor.aggregate(session, pipeline, Document::class.java)
        tracingReactor.watch()
        tracingReactor.watch(Document::class.java)
        tracingReactor.watch(pipeline)
        tracingReactor.watch(pipeline, Document::class.java)
        tracingReactor.watch(session)
        tracingReactor.watch(session, Document::class.java)
        tracingReactor.watch(session, pipeline)
        tracingReactor.watch(session, pipeline, Document::class.java)
        val mapFunction = "function map() { emit(1, this.age) }"
        val reduceFunction = "function reduce(key, values) { return Array.sum(values) }"
        tracingReactor.mapReduce(mapFunction, reduceFunction)
        tracingReactor.mapReduce(mapFunction, reduceFunction, Float::class.java)
        tracingReactor.mapReduce(session, mapFunction, reduceFunction)
        tracingReactor.mapReduce(session, mapFunction, reduceFunction, Float::class.java)
        val document = Document().append("username", "new")
        val writeRequests = listOf(InsertOneModel(document))
        tracingReactor.bulkWrite(writeRequests)
        val bulkWriteOptions = BulkWriteOptions()
        tracingReactor.bulkWrite(writeRequests, bulkWriteOptions)
        tracingReactor.bulkWrite(session, writeRequests)
        tracingReactor.bulkWrite(session, writeRequests, bulkWriteOptions)
        tracingReactor.insertOne(document)
        val insertOneOptions = InsertOneOptions()
        tracingReactor.insertOne(document, insertOneOptions)
        tracingReactor.insertOne(session, document)
        tracingReactor.insertOne(session, document, insertOneOptions)
        val documents = listOf(document)
        tracingReactor.insertMany(documents)
        val insertManyOptions = InsertManyOptions()
        tracingReactor.insertMany(documents, insertManyOptions)
        tracingReactor.insertMany(session, documents)
        tracingReactor.insertMany(session, documents, insertManyOptions)
        val oldDocument = Document().append("username", "Jean")
        tracingReactor.deleteOne(oldDocument)
        val deleteOptions = DeleteOptions()
        tracingReactor.deleteOne(oldDocument, deleteOptions)
        tracingReactor.deleteOne(session, oldDocument)
        tracingReactor.deleteOne(session, oldDocument, deleteOptions)
        tracingReactor.deleteMany(oldDocument)
        tracingReactor.deleteMany(oldDocument, deleteOptions)
        tracingReactor.deleteMany(session, oldDocument)
        tracingReactor.deleteMany(session, oldDocument, deleteOptions)
        tracingReactor.replaceOne(oldDocument, document)
        val replaceOptions = ReplaceOptions()
        tracingReactor.replaceOne(oldDocument, document, replaceOptions)
        tracingReactor.replaceOne(session, oldDocument, document)
        tracingReactor.replaceOne(session, oldDocument, document, replaceOptions)
        tracingReactor.updateOne(oldDocument, document)
        val updateOptions = UpdateOptions()
        tracingReactor.updateOne(oldDocument, document)
        tracingReactor.updateOne(oldDocument, document, updateOptions)
        tracingReactor.updateOne(session, oldDocument, document)
        tracingReactor.updateOne(session, oldDocument, document, updateOptions)
        tracingReactor.updateOne(oldDocument, documents)
        tracingReactor.updateOne(oldDocument, documents, updateOptions)
        tracingReactor.updateOne(session, oldDocument, documents)
        tracingReactor.updateOne(session, oldDocument, documents, updateOptions)
        tracingReactor.updateMany(oldDocument, document)
        tracingReactor.updateMany(oldDocument, document, updateOptions)
        tracingReactor.updateMany(session, oldDocument, document)
        tracingReactor.updateMany(session, oldDocument, document, updateOptions)
        tracingReactor.updateMany(oldDocument, documents)
        tracingReactor.updateMany(oldDocument, documents, updateOptions)
        tracingReactor.updateMany(session, oldDocument, documents)
        tracingReactor.updateMany(session, oldDocument, documents, updateOptions)
        tracingReactor.findOneAndDelete(oldDocument)
        val findOneAndDeleteOptions = FindOneAndDeleteOptions()
        tracingReactor.findOneAndDelete(oldDocument, findOneAndDeleteOptions)
        tracingReactor.findOneAndDelete(session, oldDocument)
        tracingReactor.findOneAndDelete(session, oldDocument, findOneAndDeleteOptions)
        tracingReactor.findOneAndReplace(oldDocument, document)
        val findOneAndReplaceOptions = FindOneAndReplaceOptions()
        tracingReactor.findOneAndReplace(oldDocument, document, findOneAndReplaceOptions)
        tracingReactor.findOneAndReplace(session, oldDocument, document)
        tracingReactor.findOneAndReplace(session, oldDocument, document, findOneAndReplaceOptions)
        tracingReactor.findOneAndUpdate(oldDocument, document)
        val findOneAndUpdateOptions = FindOneAndUpdateOptions()
        tracingReactor.findOneAndUpdate(oldDocument, document, findOneAndUpdateOptions)
        tracingReactor.findOneAndUpdate(session, oldDocument, document)
        tracingReactor.findOneAndUpdate(session, oldDocument, document, findOneAndUpdateOptions)
        tracingReactor.findOneAndUpdate(oldDocument, documents)
        tracingReactor.findOneAndUpdate(oldDocument, documents, findOneAndUpdateOptions)
        tracingReactor.findOneAndUpdate(session, oldDocument, documents)
        tracingReactor.findOneAndUpdate(session, oldDocument, documents, findOneAndUpdateOptions)
        tracingReactor.drop()
        tracingReactor.drop(session)
        tracingReactor.createIndex(document)
        val indexOptions = IndexOptions()
        tracingReactor.createIndex(document, indexOptions)
        tracingReactor.createIndex(session, document)
        tracingReactor.createIndex(session, document, indexOptions)
        val indexModel = listOf(IndexModel(document))
        tracingReactor.createIndexes(indexModel)
        val createIndexOptions = CreateIndexOptions()
        tracingReactor.createIndexes(indexModel, createIndexOptions)
        tracingReactor.createIndexes(session, indexModel)
        tracingReactor.createIndexes(session, indexModel, createIndexOptions)
        tracingReactor.listIndexes()
        tracingReactor.listIndexes(Document::class.java)
        tracingReactor.listIndexes(session)
        tracingReactor.listIndexes(session, Document::class.java)
        val indexName = "index"
        tracingReactor.dropIndex(indexName)
        tracingReactor.dropIndex(document)
        val dropIndexOptions = DropIndexOptions()
        tracingReactor.dropIndex(indexName, dropIndexOptions)
        tracingReactor.dropIndex(document, dropIndexOptions)
        tracingReactor.dropIndex(session, indexName)
        tracingReactor.dropIndex(session, document)
        tracingReactor.dropIndex(session, indexName, dropIndexOptions)
        tracingReactor.dropIndex(session, document, dropIndexOptions)
        tracingReactor.dropIndexes()
        tracingReactor.dropIndexes(dropIndexOptions)
        tracingReactor.dropIndexes(session)
        tracingReactor.dropIndexes(session, dropIndexOptions)
        val namespace = MongoNamespace("${MongoContainer.DATABASE_NAME}.${MongoContainer.COLLECTION_NAME}")
        tracingReactor.renameCollection(namespace)
        val renameCollectionOptions = RenameCollectionOptions()
        tracingReactor.renameCollection(namespace, renameCollectionOptions)
        tracingReactor.renameCollection(session, namespace)
        tracingReactor.renameCollection(session, namespace, renameCollectionOptions)
        verifyAll {
            original.withDocumentClass(Document::class.java)
            original.withCodecRegistry(registry)
            original.withReadPreference(ReadPreference.nearest())
            original.withWriteConcern(WriteConcern.W1)
            original.withReadConcern(ReadConcern.LOCAL)
            original.estimatedDocumentCount()
            original.estimatedDocumentCount(estimatedDocumentCountOptions)
            original.countDocuments()
            original.countDocuments(bsonDocument)
            original.countDocuments(bsonDocument, countOptions)
            original.countDocuments(session)
            original.countDocuments(session, bsonDocument)
            original.countDocuments(session, bsonDocument, countOptions)
            original.distinct(usernameAttribute, Document::class.java)
            original.distinct(usernameAttribute, bsonDocument, Document::class.java)
            original.distinct(session, usernameAttribute, Document::class.java)
            original.distinct(session, usernameAttribute, bsonDocument, Document::class.java)
            original.find()
            original.find(Document::class.java)
            original.find(bsonDocument)
            original.find(bsonDocument, Document::class.java)
            original.find(session)
            original.find(session, Document::class.java)
            original.find(session, bsonDocument)
            original.find(session, bsonDocument, Document::class.java)
            original.aggregate(pipeline)
            original.aggregate(pipeline, Document::class.java)
            original.aggregate(session, pipeline)
            original.aggregate(session, pipeline, Document::class.java)
            original.watch()
            original.watch(Document::class.java)
            original.watch(pipeline)
            original.watch(pipeline, Document::class.java)
            original.watch(session)
            original.watch(session, Document::class.java)
            original.watch(session, pipeline)
            original.watch(session, pipeline, Document::class.java)
            original.mapReduce(mapFunction, reduceFunction)
            original.mapReduce(mapFunction, reduceFunction, Float::class.java)
            original.mapReduce(session, mapFunction, reduceFunction)
            original.mapReduce(session, mapFunction, reduceFunction, Float::class.java)
            original.bulkWrite(writeRequests)
            original.bulkWrite(writeRequests, bulkWriteOptions)
            original.bulkWrite(session, writeRequests)
            original.bulkWrite(session, writeRequests, bulkWriteOptions)
            original.insertOne(document)
            original.insertOne(document, insertOneOptions)
            original.insertOne(session, document)
            original.insertOne(session, document, insertOneOptions)
            original.insertMany(documents)
            original.insertMany(documents, insertManyOptions)
            original.insertMany(session, documents)
            original.insertMany(session, documents, insertManyOptions)
            original.deleteOne(oldDocument)
            original.deleteOne(oldDocument, deleteOptions)
            original.deleteOne(session, oldDocument)
            original.deleteOne(session, oldDocument, deleteOptions)
            original.deleteMany(oldDocument)
            original.deleteMany(oldDocument, deleteOptions)
            original.deleteMany(session, oldDocument)
            original.deleteMany(session, oldDocument, deleteOptions)
            original.replaceOne(oldDocument, document)
            original.replaceOne(oldDocument, document, replaceOptions)
            original.replaceOne(session, oldDocument, document)
            original.replaceOne(session, oldDocument, document, replaceOptions)
            original.updateOne(oldDocument, document)
            original.updateOne(oldDocument, document)
            original.updateOne(oldDocument, document, updateOptions)
            original.updateOne(session, oldDocument, document)
            original.updateOne(session, oldDocument, document, updateOptions)
            original.updateOne(oldDocument, documents)
            original.updateOne(oldDocument, documents, updateOptions)
            original.updateOne(session, oldDocument, documents)
            original.updateOne(session, oldDocument, documents, updateOptions)
            original.updateMany(oldDocument, document)
            original.updateMany(oldDocument, document, updateOptions)
            original.updateMany(session, oldDocument, document)
            original.updateMany(session, oldDocument, document, updateOptions)
            original.updateMany(oldDocument, documents)
            original.updateMany(oldDocument, documents, updateOptions)
            original.updateMany(session, oldDocument, documents)
            original.updateMany(session, oldDocument, documents, updateOptions)
            original.findOneAndDelete(oldDocument)
            original.findOneAndDelete(oldDocument, findOneAndDeleteOptions)
            original.findOneAndDelete(session, oldDocument)
            original.findOneAndDelete(session, oldDocument, findOneAndDeleteOptions)
            original.findOneAndReplace(oldDocument, document)
            original.findOneAndReplace(oldDocument, document, findOneAndReplaceOptions)
            original.findOneAndReplace(session, oldDocument, document)
            original.findOneAndReplace(session, oldDocument, document, findOneAndReplaceOptions)
            original.findOneAndUpdate(oldDocument, document)
            original.findOneAndUpdate(oldDocument, document, findOneAndUpdateOptions)
            original.findOneAndUpdate(session, oldDocument, document)
            original.findOneAndUpdate(session, oldDocument, document, findOneAndUpdateOptions)
            original.findOneAndUpdate(oldDocument, documents)
            original.findOneAndUpdate(oldDocument, documents, findOneAndUpdateOptions)
            original.findOneAndUpdate(session, oldDocument, documents)
            original.findOneAndUpdate(session, oldDocument, documents, findOneAndUpdateOptions)
            original.drop()
            original.drop(session)
            original.createIndex(document)
            original.createIndex(document, indexOptions)
            original.createIndex(session, document)
            original.createIndex(session, document, indexOptions)
            original.createIndexes(indexModel)
            original.createIndexes(indexModel, createIndexOptions)
            original.createIndexes(session, indexModel)
            original.createIndexes(session, indexModel, createIndexOptions)
            original.listIndexes()
            original.listIndexes(Document::class.java)
            original.listIndexes(session)
            original.listIndexes(session, Document::class.java)
            original.dropIndex(indexName)
            original.dropIndex(document)
            original.dropIndex(indexName, dropIndexOptions)
            original.dropIndex(document, dropIndexOptions)
            original.dropIndex(session, indexName)
            original.dropIndex(session, document)
            original.dropIndex(session, indexName, dropIndexOptions)
            original.dropIndex(session, document, dropIndexOptions)
            original.dropIndexes()
            original.dropIndexes(dropIndexOptions)
            original.dropIndexes(session)
            original.dropIndexes(session, dropIndexOptions)
            original.renameCollection(namespace)
            original.renameCollection(namespace, renameCollectionOptions)
            original.renameCollection(session, namespace)
            original.renameCollection(session, namespace, renameCollectionOptions)
        }
        confirmVerified(original)
    }

    @Test
    fun `tracing reactor collection should emit items`() {
        collection
            .toTracingReactor(tracing)
            .find()
            .mapNotNull { it["username"] }
            .test()
            .expectSubscription()
            .expectNext("Jean")
            .expectNext("Pierre")
            .expectNext("Tom")
            .verifyComplete()
    }

    @Test
    fun `tracing reactor collection should emit errors`() {
        val tracingCollection = collection.toTracingReactor(tracing)
        tracingCollection
            .find()
            .doOnEach { println(it) }
            .collectList()
            .flatMap { tracingCollection.insertOne(it.first()) }
            .test()
            .verifyError(MongoWriteException::class.java)
    }
}
